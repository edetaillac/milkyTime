import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// ===========================
// Script de test de connexion Supabase
// ===========================
// Charger .env.test pour les scripts non-Next.js
dotenv.config({ path: '.env.test' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

// ‚ö†Ô∏è PROTECTION: V√©rifier l'environnement
if (process.env.NODE_ENV !== 'test') {
  console.error('üö® ERREUR: Script autoris√© uniquement avec NODE_ENV=test');
  console.error(`   NODE_ENV actuel: ${process.env.NODE_ENV}`);
  process.exit(1);
}

if (supabaseUrl?.includes('ddytdcwbxdmozvrgdsps')) {
  console.error('üö® ERREUR: URL de production d√©tect√©e !');
  console.error(`   URL: ${supabaseUrl}`);
  process.exit(1);
}

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes !');
  console.error('V√©rifiez que NEXT_PUBLIC_SUPABASE_URL et NEXT_PUBLIC_SUPABASE_ANON_KEY sont d√©finies');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testConnection() {
  console.log('üîç Test de connexion √† Supabase...');
  console.log(`URL: ${supabaseUrl}`);
  console.log(`Cl√©: ${supabaseAnonKey.substring(0, 20)}...`);
  console.log('');

  try {
    // Test 1: Connexion de base
    console.log('üì° Test 1: Connexion de base...');
    const { data: healthData, error: healthError } = await supabase
      .from('food_logs')
      .select('count')
      .limit(1);
    
    if (healthError) {
      console.error('‚ùå Erreur de connexion:', healthError.message);
      return false;
    }
    
    console.log('‚úÖ Connexion Supabase r√©ussie !');
    console.log('‚úÖ Table food_logs accessible');
    console.log('');

    // Test 2: Insertion de test
    console.log('üìù Test 2: Insertion de donn√©es de test...');
    const testData = {
      side: 'left' as const,
      timestamp: new Date().toISOString()
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from('food_logs')
      .insert([testData])
      .select();
    
    if (insertError) {
      console.error('‚ùå Erreur d\'insertion:', insertError.message);
      return false;
    }
    
    console.log('‚úÖ Insertion r√©ussie !');
    console.log(`‚úÖ ID cr√©√©: ${insertData?.[0]?.id}`);
    console.log('');

    // Test 3: Lecture de donn√©es
    console.log('üìñ Test 3: Lecture de donn√©es...');
    const { data: readData, error: readError } = await supabase
      .from('food_logs')
      .select('*')
      .order('timestamp', { ascending: false })
      .limit(5);
    
    if (readError) {
      console.error('‚ùå Erreur de lecture:', readError.message);
      return false;
    }
    
    console.log('‚úÖ Lecture r√©ussie !');
    console.log(`‚úÖ ${readData?.length || 0} enregistrements trouv√©s`);
    console.log('');

    // Test 4: Suppression de test
    console.log('üóëÔ∏è Test 4: Suppression de donn√©es de test...');
    if (insertData?.[0]?.id) {
      const { error: deleteError } = await supabase
        .from('food_logs')
        .delete()
        .eq('id', insertData[0].id);
      
      if (deleteError) {
        console.error('‚ùå Erreur de suppression:', deleteError.message);
        return false;
      }
      
      console.log('‚úÖ Suppression r√©ussie !');
      console.log('');
    }

    // Test 5: Nettoyage s√©curis√© des donn√©es de test r√©centes
    console.log('üßπ Test 5: Nettoyage s√©curis√© des donn√©es de test...');
    console.log(`üîó Base utilis√©e: ${supabaseUrl}`);
    console.log(`üîí Mode test: ${process.env.NODE_ENV === 'test'}`);
    
    // Nettoyage beaucoup moins agressif - seulement les derni√®res heures
    const cutoffDate = new Date(Date.now() - 2 * 60 * 60 * 1000) // Derni√®res 2h seulement
    const { error: cleanupError } = await supabase
      .from('food_logs')
      .delete()
      .gte('timestamp', cutoffDate.toISOString());
    
    if (cleanupError) {
      console.error('‚ùå Erreur de nettoyage:', cleanupError.message);
      return false;
    }
    
    console.log('‚úÖ Nettoyage s√©curis√© r√©ussi (derni√®res 2h seulement) !');
    console.log('');

    console.log('üéâ Tous les tests sont pass√©s !');
    console.log('‚úÖ Votre environnement Supabase de test est pr√™t !');
    console.log('');
    console.log('üìã Prochaines √©tapes :');
    console.log('1. Lancer vos tests Playwright : npm run test:e2e');
    console.log('2. V√©rifier que les tests passent');
    console.log('3. Commencer √† d√©velopper vos fonctionnalit√©s !');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
    return false;
  }
}

// Lancer le test
testConnection().then((success) => {
  if (!success) {
    console.error('');
    console.error('üîß Conseils de d√©pannage :');
    console.error('1. V√©rifiez que votre projet Supabase existe');
    console.error('2. V√©rifiez que la table food_logs est cr√©√©e');
    console.error('3. V√©rifiez que les variables d\'environnement sont correctes');
    console.error('4. V√©rifiez que RLS est configur√© correctement');
    process.exit(1);
  }
});
