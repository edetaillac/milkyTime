import { test, expect } from './fixtures/supabase';
import { createTestScenario, cleanupTestData } from './fixtures/supabase';

test.describe('Tests des records avec authentification pr√©alable', () => {
  test.beforeEach(async () => {
    // Nettoyer avant chaque test
    await cleanupTestData();
    // Attendre un peu pour s'assurer que le nettoyage est termin√©
    await new Promise(resolve => setTimeout(resolve, 1000));
  });

  test('test sans records - pas de confettis', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario sans records
    await createTestScenario('no-records');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Ajouter une t√©t√©e (ne devrait pas d√©clencher de record)
    await page.click('.rounded-full:has-text("L"):has-text("eft")');
    
    // Attendre le message de succ√®s
    await expect(page.locator('text=Feeding saved!')).toBeVisible();
    
    // V√©rifier qu'aucun confetti ne s'affiche (pas de popin de record)
    await page.waitForTimeout(3000);
    const confettiElements = await page.locator('[data-testid="confetti"], .confetti, [class*="confetti"], canvas').count();
    expect(confettiElements).toBe(0);
    
    // V√©rifier qu'aucun popin de record ne s'affiche
    const recordPopin = await page.locator('text=üéâ NEW RECORD ! üéâ').count();
    expect(recordPopin).toBe(0);
  });

  test('test record bronze seulement - ‚òÄÔ∏è ü•â battu', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario pour battre seulement le bronze
    await createTestScenario('record-bronze-only');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // Ajouter une nouvelle t√©t√©e qui va cr√©er un intervalle de 55min (qui bat seulement le bronze)
    await page.click('.rounded-full:has-text("R"):has-text("ight")');
    
    // Attendre le message de succ√®s
    await expect(page.locator('text=Feeding saved!')).toBeVisible();
    
    // Attendre et v√©rifier que les confettis s'affichent
    await page.waitForTimeout(3000);
    
    // V√©rifier qu'un popin de record s'affiche
    await expect(page.locator('text=üéâ NEW RECORD ! üéâ')).toBeVisible();
    
    // V√©rifier le pattern du record bronze seulement
    await expect(page.locator('text=‚òÄÔ∏è record ü•â broken')).toBeVisible();
    
    // Attendre un peu plus pour que le pop-in se charge compl√®tement
    await page.waitForTimeout(1000);
    
    // V√©rifier les d√©tails de l'am√©lioration (bat seulement le bronze)
    await expect(page.locator('text=Old record : 50min')).toBeVisible();
    await expect(page.locator('text=Improvement : +5min')).toBeVisible();
    
    // V√©rifier que les confettis sont pr√©sents
    const confettiElements = await page.locator('[data-testid="confetti"], .confetti, [class*="confetti"], canvas').count();
    expect(confettiElements).toBeGreaterThan(0);
  });

  test('test record bronze et argent - ‚òÄÔ∏è records ü•à ü•â broken', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario pour battre bronze et argent
    await createTestScenario('record-bronze-silver');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // Ajouter une nouvelle t√©t√©e qui va cr√©er un intervalle de 65min (qui bat bronze et argent)
    await page.click('.rounded-full:has-text("L"):has-text("eft")');
    
    // Attendre le message de succ√®s
    await expect(page.locator('text=Feeding saved!')).toBeVisible();
    
    // Attendre et v√©rifier que les confettis s'affichent
    await page.waitForTimeout(3000);
    
    // V√©rifier qu'un popin de record s'affiche
    await expect(page.locator('text=üéâ NEW RECORD ! üéâ')).toBeVisible();
    
    // V√©rifier le pattern du record bronze et argent
    // Le libell√© utilise le pluriel ("battus !") quand plusieurs records sont battus
    await expect(page.locator('[role="dialog"]')).toContainText('ü•à');
    await expect(page.locator('[role="dialog"]')).toContainText('ü•â');
    await expect(page.locator('[role="dialog"]')).toContainText('broken');
    
    // Attendre un peu plus pour que le pop-in se charge compl√®tement
    await page.waitForTimeout(1000);
    
    // V√©rifier les d√©tails de l'am√©lioration (bat bronze et argent, affiche l'argent)
    await expect(page.locator('text=Old record : 1h')).toBeVisible();
    await expect(page.locator('text=Improvement : +5min')).toBeVisible();
    
    // V√©rifier que les confettis sont pr√©sents
    const confettiElements = await page.locator('[data-testid="confetti"], .confetti, [class*="confetti"], canvas').count();
    expect(confettiElements).toBeGreaterThan(0);
  });

  test('test record tous les records - ‚òÄÔ∏è records ü•á ü•à ü•â broken', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario pour battre tous les records
    await createTestScenario('record-all');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // Ajouter une nouvelle t√©t√©e qui va cr√©er un intervalle de 85min (qui bat tous les records)
    await page.click('.rounded-full:has-text("R"):has-text("ight")');
    
    // Attendre le message de succ√®s
    await expect(page.locator('text=Feeding saved!')).toBeVisible();
    
    // Attendre et v√©rifier que les confettis s'affichent
    await page.waitForTimeout(3000);
    
    // V√©rifier qu'un popin de record s'affiche
    await expect(page.locator('text=üéâ NEW RECORD ! üéâ')).toBeVisible();
    
    // V√©rifier le pattern de tous les records battus
    const dialog = page.locator('[role="dialog"]')
    await expect(dialog).toContainText('ü•á')
    await expect(dialog).toContainText('ü•à')
    await expect(dialog).toContainText('ü•â')
    await expect(dialog).toContainText('broken')
  
    // Attendre un peu plus pour que le pop-in se charge compl√®tement
    await page.waitForTimeout(1000);
    
    // V√©rifier les d√©tails de l'am√©lioration (bat tous les records, affiche l'or)
    await expect(page.locator('[role="dialog"]')).toContainText('Old record : 1h10');
    await expect(page.locator('[role="dialog"]')).toContainText('Improvement : +15min');
    
    // V√©rifier que les confettis sont pr√©sents
    const confettiElements = await page.locator('[data-testid="confetti"], .confetti, [class*="confetti"], canvas').count();
    expect(confettiElements).toBeGreaterThan(0);
  });

  test('test record absolu avec historique - ‚òÄÔ∏è ü•á ü•à ü•â battu avec 50+ logs', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario avec beaucoup d'historique et des records √©lev√©s
    await createTestScenario('record-absolute-with-history');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement (plus de temps car beaucoup de donn√©es)
    await page.waitForTimeout(3000);
    
    // Ajouter une nouvelle t√©t√©e qui va cr√©er un intervalle de 3h30 (qui bat le record absolu √† 3h)
    await page.click('.rounded-full:has-text("R"):has-text("ight")');
    
    // Attendre le message de succ√®s
    await expect(page.locator('text=Feeding saved!')).toBeVisible();
    
    // Attendre et v√©rifier que les confettis s'affichent
    await page.waitForTimeout(3000);
    
    // V√©rifier qu'un popin de record s'affiche
    await expect(page.locator('text=üéâ NEW RECORD ! üéâ')).toBeVisible();
    
    // V√©rifier le pattern de tous les records battus (record absolu)
    const absoluteDialog = page.locator('[role="dialog"]')
    await expect(absoluteDialog).toContainText('ü•á')
    await expect(absoluteDialog).toContainText('ü•à')
    await expect(absoluteDialog).toContainText('ü•â')
    await expect(absoluteDialog).toContainText('broken')
    
    // Attendre un peu plus pour que le pop-in se charge compl√®tement
    await page.waitForTimeout(1000);
    
    // V√©rifier les d√©tails de l'am√©lioration (bat le record absolu √† 5h)
    await expect(page.locator('[role="dialog"]')).toContainText('Old record : 5h');
    await expect(page.locator('[role="dialog"]')).toContainText('Improvement : +1h');
    
    // V√©rifier que les confettis sont pr√©sents
    const confettiElements = await page.locator('[data-testid="confetti"], .confetti, [class*="confetti"], canvas').count();
    expect(confettiElements).toBeGreaterThan(0);
    
    // V√©rifier que nous avons bien beaucoup de donn√©es historiques
    // (optionnel : v√©rifier que la page affiche bien l'historique)
    await expect(page.getByTestId('page-title')).toBeVisible();
  });
});