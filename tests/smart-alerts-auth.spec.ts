import { test, expect, DEFAULT_USER_ID } from './fixtures/supabase';
import { createTestScenario, cleanupTestData } from './fixtures/supabase';

test.describe('Tests des alertes intelligentes avec authentification pr√©alable', () => {
  test.beforeEach(async () => {
    // Nettoyer avant chaque test
    await cleanupTestData();
    // Attendre un peu pour s'assurer que le nettoyage est termin√©
    await new Promise(resolve => setTimeout(resolve, 1000));
  });

  test('test alerte intelligente - dans la fen√™tre (bloc vert)', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario avec des t√©t√©es r√©centes pour cr√©er une pr√©diction
    await createTestScenario('basic');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // V√©rifier que les alertes intelligentes s'affichent
    await expect(page.locator('[data-slot="card-title"]').filter({ hasText: 'Predictions' })).toBeVisible();
    
    // V√©rifier que le bloc "Aujourd'hui" est vert (dans la fen√™tre)
    const todayBlock = page.locator('[data-testid="today-block"]');
    await expect(todayBlock).toBeVisible();
    
    // V√©rifier que le bloc a la classe verte (dans la fen√™tre)
    await expect(todayBlock).toHaveClass(/bg-green/);
    
    // V√©rifier que la pr√©diction s'affiche
    await expect(page.locator('text=Next at')).toBeVisible();

    // V√©rifier que la pr√©diction s'affiche
    await expect(page.locator('text=Start :')).toBeVisible();
    await expect(page.locator('text=End :')).toBeVisible();
  });

  test('test alerte intelligente - avant la fen√™tre (bloc rouge)', async ({ page, testData, supabaseClient }) => {
    // Pr√©parer un sc√©nario avec des t√©t√©es tr√®s r√©centes (pas encore dans la fen√™tre)
    const now = new Date();
    const recentFeedings = [
      { side: "left" as const, timestamp: new Date(now.getTime() - 10 * 60 * 1000).toISOString(), user_id: DEFAULT_USER_ID }, // 10min ago
      { side: "right" as const, timestamp: new Date(now.getTime() - 30 * 60 * 1000).toISOString(), user_id: DEFAULT_USER_ID }, // 30min ago
    ];
    
    // Ins√©rer directement les donn√©es de test
    await supabaseClient.from("food_logs").insert(recentFeedings);
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // V√©rifier que les alertes intelligentes s'affichent
    await expect(page.locator('[data-slot="card-title"]').filter({ hasText: 'Predictions' })).toBeVisible();
    
    // V√©rifier que le bloc "Aujourd'hui" est rouge (avant la fen√™tre)
    const todayBlock = page.locator('[data-testid="today-block"]');
    await expect(todayBlock).toBeVisible();
    
    // V√©rifier que le bloc a la classe rouge (avant la fen√™tre)
    await expect(todayBlock).toHaveClass(/bg-red/);
  });

  test('test alerte intelligente - apr√®s la fen√™tre (bloc vert)', async ({ page, testData, supabaseClient }) => {
    // Pr√©parer un sc√©nario avec des t√©t√©es anciennes (apr√®s la fen√™tre)
    const now = new Date();
    const oldFeedings = [
      { side: "left" as const, timestamp: new Date(now.getTime() - 4 * 60 * 60 * 1000).toISOString(), user_id: DEFAULT_USER_ID }, // 4h ago
      { side: "right" as const, timestamp: new Date(now.getTime() - 8 * 60 * 60 * 1000).toISOString(), user_id: DEFAULT_USER_ID }, // 8h ago
    ];
    
    // Ins√©rer directement les donn√©es de test
    await supabaseClient.from("food_logs").insert(oldFeedings);
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // V√©rifier que les alertes intelligentes s'affichent
    await expect(page.locator('[data-slot="card-title"]').filter({ hasText: 'Predictions' })).toBeVisible();
    
    // V√©rifier que le bloc "Aujourd'hui" est vert (apr√®s la fen√™tre)
    const todayBlock = page.locator('[data-testid="today-block"]');
    await expect(todayBlock).toBeVisible();
    
    // V√©rifier que le bloc a la classe verte (apr√®s la fen√™tre)
    await expect(todayBlock).toHaveClass(/bg-green/);

    // V√©rifier que la pr√©diction s'affiche
    await expect(page.locator('text=Start :')).toBeVisible();
    await expect(page.locator('text=End :')).toBeVisible();
  });

  test('test nouvelles fonctionnalit√©s - indicateur de fiabilit√© et cluster feeding', async ({ page, testData, supabaseClient }) => {
    // Pr√©parer un sc√©nario avec beaucoup de t√©t√©es pour tester la fiabilit√©
    const now = new Date();
    const manyFeedings: any[] = [];
    
    // Cr√©er 15 t√©t√©es sur les derni√®res 24h pour avoir une pr√©diction fiable
    for (let i = 0; i < 15; i++) {
      const hoursAgo = i * 1.5; // Toutes les 1h30
      manyFeedings.push({
        side: i % 2 === 0 ? "left" : "right" as const,
        timestamp: new Date(now.getTime() - hoursAgo * 60 * 60 * 1000).toISOString(),
        user_id: DEFAULT_USER_ID,
      });
    }
    
    // Ins√©rer directement les donn√©es de test
    await supabaseClient.from("food_logs").insert(manyFeedings);
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(3000);
    
    // DEBUG : Capturer le contenu de la page pour voir ce qui s'affiche
    const pageContent = await page.content();
    console.log('üîç Contenu de la page :', pageContent.substring(0, 2000));
    
    // V√©rifier que les alertes intelligentes s'affichent
    await expect(page.locator('[data-slot="card-title"]').filter({ hasText: 'Predictions' })).toBeVisible();
    
    // DEBUG : Chercher tous les textes contenant "Pr√©diction" ou "t√©t√©es analys√©es"
    const predictionTexts = await page.locator('text=/Pr√©diction|t√©t√©es analys√©es/').allTextContents();
    console.log('üîç Textes de pr√©diction trouv√©s :', predictionTexts);
    
    // V√©rifier que l'indicateur de fiabilit√© s'affiche (devrait √™tre "high" avec 15 t√©t√©es)
    await expect(page.locator('text=Reliability: 92%üü¢')).toBeVisible();
    
  });

  test('test alerte intelligente - √©volution de la couleur apr√®s ajout de t√©t√©e', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario avec des t√©t√©es r√©centes
    await createTestScenario('basic');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // V√©rifier que le bloc "Aujourd'hui" est vert initialement
    const todayBlock = page.locator('[data-testid="today-block"]');
    await expect(todayBlock).toHaveClass(/bg-green/);
    
    // Ajouter une nouvelle t√©t√©e
    await page.click('.rounded-full:has-text("R"):has-text("ight")');
    
    // Attendre le message de succ√®s
    await expect(page.locator('text=Feeding saved')).toBeVisible();
    
    // Attendre que la page se mette √† jour
    await page.waitForTimeout(2000);
    
    // V√©rifier que le bloc "Aujourd'hui" est maintenant rouge (reset de la fen√™tre)
    await expect(todayBlock).toHaveClass(/bg-red/);
  });

  test('test alerte intelligente - pr√©diction et fen√™tre probable', async ({ page, testData }) => {
    // Pr√©parer un sc√©nario avec des donn√©es compl√®tes pour avoir une pr√©diction fiable
    await createTestScenario('full');
    
    // Aller directement sur la page food (d√©j√† connect√© gr√¢ce √† storageState)
    await page.goto('/');
    
    // Attendre que la page se charge compl√®tement
    await page.waitForTimeout(2000);
    
    // V√©rifier que les alertes intelligentes s'affichent
    await expect(page.locator('[data-slot="card-title"]').filter({ hasText: 'Predictions' })).toBeVisible();
    
    // V√©rifier que la pr√©diction s'affiche
    await expect(page.locator('text=Next at')).toBeVisible();
    
     // V√©rifier que la pr√©diction s'affiche
     await expect(page.locator('text=Start :')).toBeVisible();
     await expect(page.locator('text=End :')).toBeVisible();
    
    // V√©rifier que le bloc "Aujourd'hui" a une couleur appropri√©e
    const todayBlock = page.locator('[data-testid="today-block"]');
    await expect(todayBlock).toBeVisible();
    
    // Le bloc devrait √™tre soit vert soit rouge selon la position dans la fen√™tre
    const hasGreenClass = await todayBlock.evaluate(el => el.className.includes('bg-green'));
    const hasRedClass = await todayBlock.evaluate(el => el.className.includes('bg-red'));
    
    expect(hasGreenClass || hasRedClass).toBe(true);
  });
});
